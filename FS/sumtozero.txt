Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.Notice that the solution set must not 
contain duplicate triplets. If no triplets are found print does not exist
import java.util.*;
class SumtoZero
{
    // Prints all triplets in arr[] with 0 sum
    static void findTriplets(int a[], int n)
    {
        boolean found=false;
        //find triplets
        for(int i=0;i<n-2;i++){
            for(int j=i+1;j<n-1;j++){
                for(int k=j+1;k<n;k++){
                    if(i!=j && j!=k && k!=i && (a[i]+a[j]+a[k]==0)){
                        System.out.println(a[i]+" "+a[j]+" "+a[k]);
                        found=true;
                    }
                }
            }
        }
        
     
        // If no triplet with 0 sum found in array
        if (found==false)
            System.out.println("does not exist");
     
    }
     
    // Driver code
    public static void main(String[] args)
    {
    	Scanner s=new Scanner(System.in);
    	System.out.println("Enter the size of the array");
    	int n=s.nextInt();
    	int a[]=new int[n];
    	
    	System.out.println("Enter the values of the array");
    	for(int i=0;i<n;i++){
    	    a[i]=s.nextInt();
    	}
    	//read array values
        findTriplets(a,n);
    }
}